openapi: 3.0.0
info:
    title: Base User API
    version: '1.0'
    contact:
        name: Nikolaus Trixner
        url: 'https://nikolaus.trixner.eu'
        email: nikolaus@trixner.eu
    license:
        name: MIT
        url: 'https://opensource.org/licenses/MIT'
    description: Basic User API for other APIs
servers:
- url: 'http://localhost:8080'
security:
    - auth: []
paths:
    '/user/{userId}':
        get:
            summary: Get a specific user
            responses:
                '200':
                    description: OK
                    headers: {}
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDto'
                            examples: {}
                '403':
                    description: Not authorized
                '404':
                    description: User not found
            description: Returns a specific user
            operationId: getUserById
        parameters:
        - schema:
              type: string
          name: userId
          in: path
          description: 'The user ID of the user, or null for the currently logged in user'
          required: true
    /userlist:
        get:
            summary: Your GET endpoint
            responses:
                '200':
                    description: OK
                    headers: {}
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserListDto'
                            examples: {}
                '403':
                    description: Unauthorized
            description: 'Return a paginated list of all users. If the provided pagination is not correct, the first 20 users will be returned instead.'
            parameters: []
            operationId: listUsers
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PaginationRequestDto'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/PaginationRequestDto'
                description: The Pagination Request. Is ignored if null.
        parameters: []
    /auth/login:
        post:
            summary: ''
            responses:
                '202':
                    description: Accepted
                '401':
                    description: Unauthorized
            operationId: loginUser
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                password:
                                    type: string
                                    format: password
                            required:
                                - username
                                - password
                    description: Logs a user in with username and password
                    security: []
            parameters: []
    /user/registration/register:
        post:
            summary: ''
            responses:
                '201':
                    description: Created
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RegistrationDto'
            description: 'Registers a new user by putting in username, email and password'
            operationId: registerUser
            security: []
        parameters: []
    /auth/logout:
        post:
            summary: ''
            responses:
                '302':
                    description: Logged out
                '403':
                    description: Unauthorized
            operationId: logoutUser
            description: Logs the current user out and destroys the current session
        parameters: []
    '/user/registration/confirmRegistration/{registrationQuery}':
        post:
            summary: ''
            responses:
                '200':
                    description: OK
                '400':
                    description: Bad Request
            operationId: confirmRegistration
            description: Confirms the registration of a new user by activating via a link that was sent via email.
            security: []
        parameters:
        - schema:
              type: string
          name: registrationQuery
          in: path
          required: true
          description: "The registration query parameter that was sent via mail to the new user's address"
    /userlist/num:
        get:
            summary: Your GET endpoint
            tags: []
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: integer
                '403':
                    description: Unauthorized
            operationId: getUserCount
            description: Returns the amount of users that currently exist.
        parameters: []
    /user:
        get:
            summary: Your GET endpoint
            tags: []
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDto'
                '403':
                    description: Unauthorized
            description: Returns the current user
            operationId: getCurrentUser
    /user/forgotPassword:
        get:
            summary: Your GET endpoint
            responses:
                '200':
                    description: Mail was sent
                '404':
                    description: User/Mail combination not found
            description: Call if the user forgot their password and want to get sent a mail with a password change link
            operationId: forgotPassword
            security: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ForgotPasswordDto'
    /user/forgotPassword/resetPassword:
        get:
            summary: Your GET endpoint
            tags: []
            responses:
                '200':
                    description: OK
                '400':
                    description: Bad Request
                '404':
                    description: Not Found
            description: Resets a password based on a password reset request
            operationId: resetPasswordRequest
            security: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PasswordResetDto'
        parameters: []
components:
    securitySchemes:
        auth:
            type: http
            scheme: Bearer
            bearerFormat: JWT
    schemas:
        UserDto:
            title: UserDto
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                username:
                    type: string
                email:
                    type: string
                    format: email
        RegistrationDto:
            title: RegistrationDto
            type: object
            properties:
                username:
                    type: string
                email:
                    type: string
                    format: email
                password:
                    type: string
                    format: password
            required:
            - username
            - email
            - password
        ForgotPasswordDto:
            title: ForgotPasswordDto
            type: object
            properties:
                username:
                    type: string
                email:
                    type: string
                    format: email
            required:
            - username
            - email
        PasswordResetDto:
            title: PasswordResetDto
            type: object
            properties:
                newPassword:
                    type: string
                requestId:
                    type: string
                    format: uuid
            required:
            - newPassword
            - requestId
        UserListDto:
            title: UserListDto
            type: object
            properties:
                pageSize:
                    type: integer
                pagePos:
                    type: integer
                ordering:
                    type: string
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/UserDto'
        PaginationRequestDto:
            title: PaginationRequestDto
            type: object
            properties:
                page:
                    type: integer
                pageSize:
                    type: integer
                orderField:
                    type: string
                orderDirection:
                    type: object
                    enum:
                    - ASC
                    - DESC
            description: A request for Pagination
