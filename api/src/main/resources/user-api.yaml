openapi: 3.0.0
info:
    title: Base User API
    version: '1.0'
    contact:
        name: Nikolaus Trixner
        url: 'https://nikolaus.trixner.eu'
        email: nikolaus@trixner.eu
    license:
        name: MIT
        url: 'https://opensource.org/licenses/MIT'
    description: Basic User API for other APIs
tags:
    -   name: User
        description: Methods used for registering, forgetting passwords, login and logout
    -   name: Userlist
        description: Methods used for the Userlist
servers:
    -   url: 'http://localhost:8080/api'
security:
    -   auth: []
paths:
    /auth/login:
        post:
            tags:
                - User
            summary: ''
            responses:
                '202':
                    description: Accepted
                    headers:
                        Authorization:
                            schema:
                                type: string
                '401':
                    description: Unauthorized
            operationId: loginUser
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginDto'
            description: Logs a user in with username and password
            parameters: []
            security: []
    /auth/logout:
        post:
            tags:
                - User
            summary: ''
            responses:
                '302':
                    description: Logged out
                '403':
                    description: Unauthorized
            operationId: logoutUser
            description: Logs the current user out and destroys the current session
    '/user/{userId}':
        get:
            tags:
                - User
            summary: Get a specific user
            responses:
                '200':
                    description: OK
                    headers: {}
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDto'
                            examples: {}
                '403':
                    description: Not authorized
                '404':
                    description: User not found
            description: Returns a specific user
            operationId: getUserById
        parameters:
            -   schema:
                    type: string
                name: userId
                in: path
                description: 'The user ID of the user, or null for the currently logged in user'
                required: true
    /user/registration/register:
        post:
            tags:
                - User
            summary: ''
            responses:
                '201':
                    description: Created
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RegistrationDto'
            description: 'Registers a new user by putting in username, email and password'
            operationId: registerUser
            security: []
        parameters: []
    '/user/registration/confirmRegistration/{token}':
        get:
            tags:
                - User
            summary: ''
            responses:
                '200':
                    description: OK
                '400':
                    description: Bad Request
            operationId: confirmRegistration
            description: Confirms the registration of a new user by activating via a link that was sent via email.
            security: []
        parameters:
            -   schema:
                    type: string
                name: token
                in: path
                required: true
                description: "The registration token that was sent via mail to the new user's address"
    /user:
        get:
            summary: Your GET endpoint
            tags:
                - User
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserDto'
                '403':
                    description: Unauthorized
            description: Returns the current user
            operationId: getCurrentUser
    /user/forgotPassword:
        post:
            tags:
                - User
            summary: Your POST endpoint
            responses:
                '200':
                    description: Mail was sent
                '404':
                    description: User/Mail combination not found
            description: Call if the user forgot their password and want to get sent a mail with a password change link
            operationId: forgotPassword
            security: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ForgotPasswordDto'
    /user/forgotPassword/resetPassword:
        post:
            summary: Your GET endpoint
            tags:
                - User
            responses:
                '200':
                    description: OK
                '400':
                    description: Bad Request
                '404':
                    description: Not Found
            description: Resets a password based on a password reset request
            operationId: resetPasswordRequest
            security: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PasswordResetDto'
        parameters: []
    /user/changePassword:
        post:
            tags:
                - User
            summary: Your GET endpoint
            responses:
                '200':
                    description: Password was changed
                '400':
                    description: Bad Request, old password was most likely wrong
            description: Call to change the user's password
            operationId: changePassword
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ChangePasswordDto'
        parameters: []
    /userlist:
        get:
            tags:
                - Userlist
            summary: Your GET endpoint
            responses:
                '200':
                    description: OK
                    headers: {}
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserListDto'
                            examples: {}
                '403':
                    description: Unauthorized
            description: 'Return a paginated list of all users. If the provided pagination is not correct, the first 20 users will be returned instead.'
            parameters:
                -   in: query
                    name: page
                    required: false
                    schema:
                        type: integer
                    description: The current page index
                -   in: query
                    name: pageSize
                    required: false
                    schema:
                        type: integer
                    description: The size of the page
                -   in: query
                    name: orderField
                    required: false
                    schema:
                        type: string
                    description: The field to be ordered by
                -   in: query
                    name: orderDirection
                    required: false
                    schema:
                        type: string
                    description: The direction to be sorted in. Either asc or desc

            operationId: listUsers
        parameters: []
    /userlist/num:
        get:
            tags:
                - Userlist
            summary: Your GET endpoint
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: integer
                '403':
                    description: Unauthorized
            operationId: getUserCount
            description: Returns the amount of users that currently exist.
        parameters: []
components:
    securitySchemes:
        auth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    schemas:
        LoginDto:
            title: LoginDto
            type: object
            properties:
                username:
                    type: string
                password:
                    type: string
            required:
                - username
                - password
        UserDto:
            title: UserDto
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                username:
                    type: string
                email:
                    type: string
                    format: email
        RegistrationDto:
            title: RegistrationDto
            type: object
            properties:
                username:
                    type: string
                email:
                    type: string
                    format: email
                password:
                    type: string
                    format: password
            required:
                - username
                - email
                - password
        ForgotPasswordDto:
            title: ForgotPasswordDto
            type: object
            properties:
                username:
                    type: string
                email:
                    type: string
                    format: email
            required:
                - username
                - email
        PasswordResetDto:
            title: PasswordResetDto
            type: object
            properties:
                newPassword:
                    type: string
                token:
                    type: string
            required:
                - newPassword
                - requestId
        ChangePasswordDto:
            title: ChangePasswordDto
            type: object
            properties:
                newPassword:
                    type: string
                oldPassword:
                    type: string
            required:
                - newPassword
                - oldPassword
        UserListDto:
            title: UserListDto
            type: object
            properties:
                pageSize:
                    type: integer
                pagePos:
                    type: integer
                ordering:
                    type: string
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/UserDto'