{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/api/api.module.ts","webpack:///src/api/api/api.ts","webpack:///src/api/api/default.service.ts","webpack:///src/api/configuration.ts","webpack:///src/api/encoder.ts","webpack:///src/api/index.ts","webpack:///src/api/model/models.ts","webpack:///src/api/model/paginationRequestDto.ts","webpack:///src/api/variables.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/forgot-password/forgot-password.component.ts","webpack:///src/app/components/forgot-password/forgot-password.component.html","webpack:///src/app/components/home/home.component.ts","webpack:///src/app/components/home/home.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/register/register.component.ts","webpack:///src/app/components/register/register.component.html","webpack:///src/app/guards/auth/auth.guard.ts","webpack:///src/app/services/auth/auth.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ApiModule","parentModule","http","configurationFactory","ngModule","providers","provide","useFactory","imports","declarations","APIS","DefaultService","httpClient","basePath","configuration","defaultHeaders","encoder","changePasswordDto","observe","reportProgress","headers","username","password","set","btoa","httpHeaderAccepts","httpHeaderAcceptSelected","selectHeaderAccept","undefined","consumes","httpContentTypeSelected","selectHeaderContentType","post","withCredentials","token","get","encodeURIComponent","String","forgotPasswordDto","userId","paginationRequestDto","loginDto","registrationDto","passwordResetDto","providedIn","Configuration","configurationParameters","apiKeys","accessToken","contentTypes","length","type","find","x","isJsonMime","accepts","mime","jsonMime","RegExp","test","toLowerCase","CustomHttpParameterCodec","k","v","decodeURIComponent","PaginationRequestDto","OrderDirectionEnum","ASC","DESC","BASE_PATH","COLLECTION_FORMATS","routes","path","component","canActivate","redirectTo","AppRoutingModule","forRoot","AppComponent","title","selector","templateUrl","styleUrls","apiConfigFactory","params","serverUrl","AppModule","bootstrap","ForgotPasswordComponent","HomeComponent","LoginComponent","RegisterComponent","AuthGuard","router","service","next","state","currentUser","user","navigate","queryParams","returnUrl","url","AuthService","api","login","console","log","loginUser","pipe","err","subscribe","data","ok","logoutUser","environment","production","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { DefaultService } from './api/default.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    DefaultService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","export * from './default.service';\nimport { DefaultService } from './default.service';\nexport const APIS = [DefaultService];\n","/**\n * Base User API\n * Basic User API for other APIs\n *\n * The version of the OpenAPI document: 1.0\n * Contact: nikolaus@trixner.eu\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { ChangePasswordDto } from '../model/changePasswordDto';\nimport { ForgotPasswordDto } from '../model/forgotPasswordDto';\nimport { LoginDto } from '../model/loginDto';\nimport { PaginationRequestDto } from '../model/paginationRequestDto';\nimport { PasswordResetDto } from '../model/passwordResetDto';\nimport { RegistrationDto } from '../model/registrationDto';\nimport { UserDto } from '../model/userDto';\nimport { UserListDto } from '../model/userListDto';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DefaultService {\n\n    protected basePath = 'http://localhost:8080';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n\n    /**\n     * Your GET endpoint\n     * Call to change the user\\&#39;s password\n     * @param changePasswordDto \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public changePassword(changePasswordDto?: ChangePasswordDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public changePassword(changePasswordDto?: ChangePasswordDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public changePassword(changePasswordDto?: ChangePasswordDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public changePassword(changePasswordDto?: ChangePasswordDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (auth) required\n        if (this.configuration.username || this.configuration.password) {\n            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));\n        }\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/user/changePassword`,\n            changePasswordDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Confirms the registration of a new user by activating via a link that was sent via email.\n     * @param token The registration token that was sent via mail to the new user\\&#39;s address\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public confirmRegistration(token: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public confirmRegistration(token: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public confirmRegistration(token: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public confirmRegistration(token: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (token === null || token === undefined) {\n            throw new Error('Required parameter token was null or undefined when calling confirmRegistration.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        return this.httpClient.get<any>(`${this.configuration.basePath}/user/registration/confirmRegistration/${encodeURIComponent(String(token))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Your POST endpoint\n     * Call if the user forgot their password and want to get sent a mail with a password change link\n     * @param forgotPasswordDto \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public forgotPassword(forgotPasswordDto?: ForgotPasswordDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public forgotPassword(forgotPasswordDto?: ForgotPasswordDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public forgotPassword(forgotPasswordDto?: ForgotPasswordDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public forgotPassword(forgotPasswordDto?: ForgotPasswordDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/user/forgotPassword`,\n            forgotPasswordDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Your GET endpoint\n     * Returns the current user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCurrentUser(observe?: 'body', reportProgress?: boolean): Observable<UserDto>;\n    public getCurrentUser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDto>>;\n    public getCurrentUser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDto>>;\n    public getCurrentUser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (auth) required\n        if (this.configuration.username || this.configuration.password) {\n            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));\n        }\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        return this.httpClient.get<UserDto>(`${this.configuration.basePath}/user`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get a specific user\n     * Returns a specific user\n     * @param userId The user ID of the user, or null for the currently logged in user\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUserById(userId: string, observe?: 'body', reportProgress?: boolean): Observable<UserDto>;\n    public getUserById(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDto>>;\n    public getUserById(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDto>>;\n    public getUserById(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n        if (userId === null || userId === undefined) {\n            throw new Error('Required parameter userId was null or undefined when calling getUserById.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // authentication (auth) required\n        if (this.configuration.username || this.configuration.password) {\n            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));\n        }\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        return this.httpClient.get<UserDto>(`${this.configuration.basePath}/user/${encodeURIComponent(String(userId))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Your GET endpoint\n     * Returns the amount of users that currently exist.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getUserCount(observe?: 'body', reportProgress?: boolean): Observable<number>;\n    public getUserCount(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;\n    public getUserCount(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;\n    public getUserCount(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (auth) required\n        if (this.configuration.username || this.configuration.password) {\n            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));\n        }\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        return this.httpClient.get<number>(`${this.configuration.basePath}/userlist/num`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Your GET endpoint\n     * Return a paginated list of all users. If the provided pagination is not correct, the first 20 users will be returned instead.\n     * @param paginationRequestDto The Pagination Request. Is ignored if null.\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public listUsers(paginationRequestDto?: PaginationRequestDto, observe?: 'body', reportProgress?: boolean): Observable<UserListDto>;\n    public listUsers(paginationRequestDto?: PaginationRequestDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserListDto>>;\n    public listUsers(paginationRequestDto?: PaginationRequestDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserListDto>>;\n    public listUsers(paginationRequestDto?: PaginationRequestDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (auth) required\n        if (this.configuration.username || this.configuration.password) {\n            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));\n        }\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.get<UserListDto>(`${this.configuration.basePath}/userlist`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Logs a user in with username and password\n     * @param loginDto \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public loginUser(loginDto?: LoginDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public loginUser(loginDto?: LoginDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public loginUser(loginDto?: LoginDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public loginUser(loginDto?: LoginDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/auth/login`,\n            loginDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Logs the current user out and destroys the current session\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public logoutUser(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public logoutUser(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public logoutUser(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public logoutUser(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // authentication (auth) required\n        if (this.configuration.username || this.configuration.password) {\n            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));\n        }\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/auth/logout`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Registers a new user by putting in username, email and password\n     * @param registrationDto \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public registerUser(registrationDto?: RegistrationDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public registerUser(registrationDto?: RegistrationDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public registerUser(registrationDto?: RegistrationDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public registerUser(registrationDto?: RegistrationDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/user/registration/register`,\n            registrationDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Your GET endpoint\n     * Resets a password based on a password reset request\n     * @param passwordResetDto \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public resetPasswordRequest(passwordResetDto?: PasswordResetDto, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public resetPasswordRequest(passwordResetDto?: PasswordResetDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public resetPasswordRequest(passwordResetDto?: PasswordResetDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public resetPasswordRequest(passwordResetDto?: PasswordResetDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        const httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<any>(`${this.configuration.basePath}/user/forgotPassword/resetPassword`,\n            passwordResetDto,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","export * from './changePasswordDto';\nexport * from './forgotPasswordDto';\nexport * from './loginDto';\nexport * from './paginationRequestDto';\nexport * from './passwordResetDto';\nexport * from './registrationDto';\nexport * from './userDto';\nexport * from './userListDto';\n","/**\n * Base User API\n * Basic User API for other APIs\n *\n * The version of the OpenAPI document: 1.0\n * Contact: nikolaus@trixner.eu\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n/**\n * A request for Pagination\n */\nexport interface PaginationRequestDto { \n    page?: number;\n    pageSize?: number;\n    orderField?: string;\n    orderDirection?: PaginationRequestDto.OrderDirectionEnum;\n}\nexport namespace PaginationRequestDto {\n    export type OrderDirectionEnum = 'ASC' | 'DESC';\n    export const OrderDirectionEnum = {\n        ASC: 'ASC' as OrderDirectionEnum,\n        DESC: 'DESC' as OrderDirectionEnum\n    };\n}\n\n\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {HomeComponent} from './components/home/home.component';\nimport {LoginComponent} from './components/login/login.component';\nimport {RegisterComponent} from './components/register/register.component';\nimport {AuthGuard} from './guards/auth/auth.guard';\nimport {ForgotPasswordComponent} from './components/forgot-password/forgot-password.component';\n\n\nconst routes: Routes = [\n  {path: '', component: HomeComponent, canActivate: [AuthGuard]},\n  {path: 'login', component: LoginComponent},\n  {path: 'register', component: RegisterComponent},\n  {path: 'forgotPassword', component: ForgotPasswordComponent},\n  // otherwise redirect to home\n  {path: '**', redirectTo: ''}\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n\n}\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.less']\n})\nexport class AppComponent {\n  title = 'Base Client';\n}\n","<h1>{{title}}</h1>\n<router-outlet></router-outlet>\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {ApiModule, Configuration, ConfigurationParameters} from '../api';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {HttpClientModule} from '@angular/common/http';\nimport {LoginComponent} from './components/login/login.component';\nimport {HomeComponent} from './components/home/home.component';\nimport {RegisterComponent} from './components/register/register.component';\nimport {ForgotPasswordComponent} from './components/forgot-password/forgot-password.component';\nimport {environment} from '../environments/environment';\n\nexport function apiConfigFactory(): Configuration {\n  const params: ConfigurationParameters = {\n    basePath: environment.serverUrl\n  };\n  return new Configuration(params);\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    HomeComponent,\n    RegisterComponent,\n    ForgotPasswordComponent\n  ],\n  imports: [\n    ApiModule,\n    ApiModule.forRoot(apiConfigFactory),\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.less']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>forgot-password works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.less']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>home works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.less']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>login works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.less']\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>register works!</p>\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {AuthService} from '../../services/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router, private service: AuthService) {\n\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const currentUser = this.service.user;\n    if (currentUser) {\n      return true;\n    } else {\n      this.router.navigate(['/login'], {queryParams: {returnUrl: state.url}});\n      return false;\n    }\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {DefaultService, UserDto} from '../../../api';\nimport {HttpEvent, HttpResponse} from '@angular/common/http';\nimport {catchError} from 'rxjs/operators';\nimport {of} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public user: UserDto;\n  public token: string;\n\n  constructor(private api: DefaultService) {\n    this.login('user', 'user');\n  }\n\n  public login(username: string, password: string): void {\n    console.log(`Trying to log in ${username} with password ${password}`);\n    this.api.loginUser({username, password}, 'response')\n      .pipe(\n        catchError(err => {\n          console.log(err);\n          return of([]);\n        })\n      )\n      .subscribe((data: HttpResponse<any>) => {\n        console.log(data.headers.keys());\n        if (data.ok && data.headers.get('Authorization')) {\n          this.token = data.headers.get('Authorization');\n        }\n      });\n  }\n\n  public logout(): void {\n    this.api.logoutUser('body').subscribe((data: HttpEvent<any>) => {\n      console.log(data);\n    });\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  serverUrl: 'http://localhost:8080'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}